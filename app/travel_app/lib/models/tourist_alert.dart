enum AlertType { sos, geofence, deviation, inactivity, lowBattery, restricted }

enum AlertPriority { low, medium, high, critical }

class TouristAlert {
  final String id;
  final String touristId;
  final AlertType type;
  final AlertPriority priority;
  final String title;
  final String message;
  final double? latitude;
  final double? longitude;
  final DateTime timestamp;
  final bool isResolved;
  final String? resolvedBy;
  final DateTime? resolvedAt;
  final Map<String, dynamic> metadata;

  TouristAlert({
    required this.id,
    required this.touristId,
    required this.type,
    required this.priority,
    required this.title,
    required this.message,
    this.latitude,
    this.longitude,
    required this.timestamp,
    this.isResolved = false,
    this.resolvedBy,
    this.resolvedAt,
    this.metadata = const {},
  });

  factory TouristAlert.createSOS({
    required String touristId,
    required double latitude,
    required double longitude,
    String? customMessage,
  }) {
    return TouristAlert(
      id: DateTime.now().millisecondsSinceEpoch.toString(),
      touristId: touristId,
      type: AlertType.sos,
      priority: AlertPriority.critical,
      title: 'SOS Alert',
      message: customMessage ?? 'Tourist has triggered emergency SOS',
      latitude: latitude,
      longitude: longitude,
      timestamp: DateTime.now(),
      metadata: {'autoGenerated': true, 'requiresImmediateResponse': true},
    );
  }

  factory TouristAlert.createGeofenceAlert({
    required String touristId,
    required double latitude,
    required double longitude,
    required String zoneName,
    required bool isRestricted,
  }) {
    return TouristAlert(
      id: DateTime.now().millisecondsSinceEpoch.toString(),
      touristId: touristId,
      type: AlertType.geofence,
      priority: isRestricted ? AlertPriority.high : AlertPriority.medium,
      title: isRestricted ? 'Restricted Zone Entry' : 'Risk Zone Entry',
      message: 'Tourist entered $zoneName',
      latitude: latitude,
      longitude: longitude,
      timestamp: DateTime.now(),
      metadata: {'zoneName': zoneName, 'isRestricted': isRestricted},
    );
  }

  factory TouristAlert.createDeviationAlert({
    required String touristId,
    required double latitude,
    required double longitude,
    required String plannedLocation,
    required double deviationDistance,
  }) {
    return TouristAlert(
      id: DateTime.now().millisecondsSinceEpoch.toString(),
      touristId: touristId,
      type: AlertType.deviation,
      priority: AlertPriority.medium,
      title: 'Route Deviation',
      message:
          'Tourist deviated ${deviationDistance.toStringAsFixed(1)}km from planned route',
      latitude: latitude,
      longitude: longitude,
      timestamp: DateTime.now(),
      metadata: {
        'plannedLocation': plannedLocation,
        'deviationDistance': deviationDistance,
      },
    );
  }

  factory TouristAlert.createInactivityAlert({
    required String touristId,
    required double latitude,
    required double longitude,
    required Duration inactiveDuration,
  }) {
    return TouristAlert(
      id: DateTime.now().millisecondsSinceEpoch.toString(),
      touristId: touristId,
      type: AlertType.inactivity,
      priority: AlertPriority.medium,
      title: 'Prolonged Inactivity',
      message:
          'No activity detected for ${inactiveDuration.inHours}h ${inactiveDuration.inMinutes % 60}m',
      latitude: latitude,
      longitude: longitude,
      timestamp: DateTime.now(),
      metadata: {
        'inactiveDurationHours': inactiveDuration.inHours,
        'inactiveDurationMinutes': inactiveDuration.inMinutes,
      },
    );
  }

  TouristAlert resolve({required String resolvedBy}) {
    return TouristAlert(
      id: id,
      touristId: touristId,
      type: type,
      priority: priority,
      title: title,
      message: message,
      latitude: latitude,
      longitude: longitude,
      timestamp: timestamp,
      isResolved: true,
      resolvedBy: resolvedBy,
      resolvedAt: DateTime.now(),
      metadata: metadata,
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'touristId': touristId,
      'type': type.name,
      'priority': priority.name,
      'title': title,
      'message': message,
      'latitude': latitude,
      'longitude': longitude,
      'timestamp': timestamp.toIso8601String(),
      'isResolved': isResolved,
      'resolvedBy': resolvedBy,
      'resolvedAt': resolvedAt?.toIso8601String(),
      'metadata': metadata,
    };
  }

  factory TouristAlert.fromJson(Map<String, dynamic> json) {
    return TouristAlert(
      id: json['id'],
      touristId: json['touristId'],
      type: AlertType.values.byName(json['type']),
      priority: AlertPriority.values.byName(json['priority']),
      title: json['title'],
      message: json['message'],
      latitude: json['latitude']?.toDouble(),
      longitude: json['longitude']?.toDouble(),
      timestamp: DateTime.parse(json['timestamp']),
      isResolved: json['isResolved'] ?? false,
      resolvedBy: json['resolvedBy'],
      resolvedAt: json['resolvedAt'] != null
          ? DateTime.parse(json['resolvedAt'])
          : null,
      metadata: json['metadata'] ?? {},
    );
  }

  // Backend JSON format conversion
  factory TouristAlert.fromBackendJson(Map<String, dynamic> json) {
    AlertType alertType = AlertType.deviation;
    AlertPriority priority = AlertPriority.medium;

    // Map backend alertType to our enum
    switch (json['alertType']?.toLowerCase()) {
      case 'sos':
      case 'emergency':
        alertType = AlertType.sos;
        priority = AlertPriority.critical;
        break;
      case 'geofence':
        alertType = AlertType.geofence;
        break;
      case 'restricted':
        alertType = AlertType.restricted;
        break;
      case 'inactivity':
        alertType = AlertType.inactivity;
        break;
      case 'lowbattery':
        alertType = AlertType.lowBattery;
        break;
      default:
        alertType = AlertType.deviation;
    }

    // Map backend severity to our priority
    switch (json['severity']?.toLowerCase()) {
      case 'critical':
        priority = AlertPriority.critical;
        break;
      case 'high':
        priority = AlertPriority.high;
        break;
      case 'medium':
        priority = AlertPriority.medium;
        break;
      case 'low':
        priority = AlertPriority.low;
        break;
    }

    return TouristAlert(
      id: json['id'],
      touristId: json['userId'], // Backend uses userId
      type: alertType,
      priority: priority,
      title: json['alertType']?.toString().toUpperCase() ?? 'Alert',
      message: json['message'],
      latitude: json['latitude']?.toDouble(),
      longitude: json['longitude']?.toDouble(),
      timestamp: DateTime.parse(
        json['createdAt'] ?? DateTime.now().toIso8601String(),
      ),
      isResolved: json['isResolved'] ?? false,
      resolvedBy: null,
      resolvedAt: json['updatedAt'] != null && json['isResolved'] == true
          ? DateTime.parse(json['updatedAt'])
          : null,
      metadata: {'location': json['location'], 'tripId': json['tripId']},
    );
  }
}
