// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(uuid())
  name              String?
  email             String?  @unique
  phoneNumber       String?
  dateOfBirth       DateTime?
  address           String?
  gender            String?
  bloodGroup        String?
  height            Float?
  weight            Float?
  organDonor        Boolean?
  languages         String?   // Comma-separated or use a relation for multi-language support
  emergencyContactName     String?
  emergencyContactPhone    String?
  emergencyContactRelation String?
  
  // Tourism specific fields
  passportNumber    String?
  nationality       String?
  aadharCardUrl     String?  // For KYC verification
  profileImageUrl   String?
  isKycVerified     Boolean  @default(false)
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  trips             Trip[]
  alerts            TouristAlert[]
  locations         LocationData[]
  safetyScores      SafetyScore[]
  digitalID         DigitalID?
  efirs             EFIR[]
  feedback          Feedback[]
}

model Trip {
  id                String   @id @default(uuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  tripStartDate     DateTime
  tripEndDate       DateTime
  plannedLocations  String[] // Array of location names
  currentLocation   String?
  status            String   @default("planned") // planned, active, completed, cancelled
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  alerts            TouristAlert[]
  locations         LocationData[]
}

model TouristAlert {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tripId      String?
  trip        Trip?    @relation(fields: [tripId], references: [id], onDelete: SetNull)
  
  alertType   String   // emergency, safety, weather, etc.
  message     String
  severity    String   // low, medium, high, critical
  location    String?
  latitude    Float?
  longitude   Float?
  isResolved  Boolean  @default(false)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  efir        EFIR?
}

model LocationData {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tripId      String?
  trip        Trip?    @relation(fields: [tripId], references: [id], onDelete: SetNull)
  
  latitude    Float
  longitude   Float
  address     String?
  timestamp   DateTime @default(now())
  accuracy    Float?
  speed       Float?
  
  createdAt   DateTime @default(now())
}

model SafetyScore {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  location    String
  latitude    Float
  longitude   Float
  score       Float    // 0.0 to 10.0
  factors     Json     // JSON object with various safety factors
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([userId, location])
}

model Geofence {
  id          String   @id @default(uuid())
  name        String
  description String?
  
  // Polygon coordinates for geofence boundary
  coordinates Json     // Array of [lat, lng] pairs
  
  // Geofence properties
  type        String   // safe_zone, danger_zone, restricted_area, etc.
  isActive    Boolean  @default(true)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model DigitalID {
  id          String   @id @default(uuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  idNumber    String   @unique
  issuedAt    DateTime @default(now())
  expiresAt   DateTime?
  status      String   @default("active") // active, expired, revoked
}

model EFIR {
  id          String   @id @default(uuid())
  alertId     String?  @unique
  alert       TouristAlert? @relation(fields: [alertId], references: [id], onDelete: SetNull)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  reportType  String   // theft, assault, harassment, medical, etc.
  description String
  location    String?
  latitude    Float?
  longitude   Float?
  filedBy     String   // could be "tourist", "police", "admin", etc.
  status      String   @default("pending") // pending, investigating, resolved, closed
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Feedback {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  rating      Int      // 1-5 stars
  category    String   // app, service, safety, location, etc.
  comment     String?
  createdAt   DateTime @default(now())
}
